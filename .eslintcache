[{"D:\\PROJECT'S\\react_js\\new-project\\src\\index.js":"1","D:\\PROJECT'S\\react_js\\new-project\\src\\App.js":"2","D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Home.js":"3","D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Header.js":"4","D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Alluser.js":"5","D:\\PROJECT'S\\react_js\\new-project\\src\\component\\History.js":"6","D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Singleuser.js":"7"},{"size":308,"mtime":1623661081601,"results":"8","hashOfConfig":"9"},{"size":691,"mtime":1623686279159,"results":"10","hashOfConfig":"9"},{"size":1041,"mtime":1623675727913,"results":"11","hashOfConfig":"9"},{"size":752,"mtime":1623673846404,"results":"12","hashOfConfig":"9"},{"size":1936,"mtime":1623830912765,"results":"13","hashOfConfig":"9"},{"size":1920,"mtime":1623832599327,"results":"14","hashOfConfig":"9"},{"size":5126,"mtime":1623840750306,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"36dsy7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"D:\\PROJECT'S\\react_js\\new-project\\src\\index.js",[],["32","33"],"D:\\PROJECT'S\\react_js\\new-project\\src\\App.js",[],"D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Home.js",[],"D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Header.js",[],"D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Alluser.js",[],"D:\\PROJECT'S\\react_js\\new-project\\src\\component\\History.js",[],"D:\\PROJECT'S\\react_js\\new-project\\src\\component\\Singleuser.js",["34","35"],"import React, { Component, Fragment } from 'react';\r\nimport Header from './Header.js';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport user from '../image/users.png';\r\nimport Axios from 'axios';\r\n\r\nclass Singleuser extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            us: true,\r\n            data: null,\r\n            sender: null,\r\n            receiver: null,\r\n            amount: null,\r\n            balance: null,\r\n            mail: null,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:3002/api/alluser').then((response) => {\r\n            this.setState({\r\n                data: response.data,\r\n                sender: response.data[this.props.match.params.id - 1].name,\r\n                balance: response.data[this.props.match.params.id - 1].balance,\r\n                mail: response.data[this.props.match.params.id - 1].email\r\n            })\r\n        }).catch(error => console.error(`Error: ${error}`))\r\n    }\r\n\r\n    senddata(name, amount) {\r\n        Axios.put('http://localhost:3002/api/update', {\r\n            name: name,\r\n            amount: amount\r\n        });\r\n    }\r\n\r\n    transfer() {\r\n        if (this.state.receiver === null || this.state.receiver === \"Select Receiver\" || this.state.amount === null) {\r\n            alert(\"Enter Detail\")\r\n        } else if (this.state.data[this.props.match.params.id - 1].balance < this.state.amount) {\r\n            alert(\"Insuficiant Balance\");\r\n        } else {\r\n            let d = new Date();\r\n            let date = `${d.getDate()}-${d.getMonth()}-${d.getFullYear()}`\r\n\r\n            Axios.post('http://localhost:3002/api/insert/transaction', {\r\n                sender: this.state.sender,\r\n                receiver: this.state.receiver,\r\n                amount: this.state.amount,\r\n                date: date\r\n            }).then(() => {\r\n            }).catch(error => console.error(`Error: ${error}`))\r\n\r\n            let snderamount = this.state.data[this.props.match.params.id - 1].balance - this.state.amount;\r\n            let receiveramount = null;\r\n            this.state.data.map((item) => {\r\n                if (item.name === this.state.receiver) {\r\n                    receiveramount = item.balance\r\n                }\r\n            })\r\n            receiveramount = receiveramount + parseInt(this.state.amount);\r\n            console.log(receiveramount);\r\n            console.log(snderamount);\r\n\r\n            this.senddata(this.state.sender, snderamount);\r\n            this.senddata(this.state.receiver, receiveramount);\r\n            alert(\"Amount Transfered\")\r\n            this.setState({\r\n                balance: this.state.balance - this.state.amount\r\n            })\r\n            setTimeout(() => { this.setState({ us: true }) }, 500)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className={this.state.us ? \"user_submit\" : \"user_submit1 user_submit\"}>\r\n\r\n                    <input type=\"text\" placeholder=\"Enter Amount\" value={this.state.amount} onChange={(e) => this.setState({ amount: e.target.value })} />\r\n                    <select onChange={(e) => this.setState({ receiver: e.target.value })}>\r\n                        <option>Select Receiver</option>\r\n                        {\r\n                            this.state.data == null ?\r\n                                <option>Users</option>\r\n                                : this.state.data.map((item) => {\r\n                                    return item.id == this.props.match.params.id ? null : <option>{item.name}</option>\r\n                                })\r\n                        }\r\n                    </select>\r\n                    <button onClick={() => this.transfer()}>Transfer</button>\r\n                    <button onClick={() => this.setState({ us: true })}>Cancel</button>\r\n                </div>\r\n                <Header />\r\n                <div className=\"user\">\r\n                    <div className=\"path\">\r\n                        <Link to=\"/\">Home</Link> &#62; <Link to=\"/alluser\">All User</Link> &#62;  {this.state.data == null ? null : this.state.data[this.props.match.params.id - 1].name}\r\n                    </div>\r\n                    <div className=\"user_detail\">\r\n                        <div className=\"user_img\">\r\n                            <img src={user} alt=\"user_image\" />\r\n                        </div>\r\n                        <div className=\"user_other\">\r\n                            <p>Name:</p>\r\n                            <p>{this.state.sender}</p>\r\n                            <p>Email:</p>\r\n                            <p>{this.state.mail}</p>\r\n                            <p>Current Balance:</p>\r\n                            <p>{this.state.balance}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"transfer_money\">\r\n                        <button onClick={() => this.setState({ us: false })}>Transfer Money</button>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Singleuser);",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":60,"column":40,"nodeType":"42","messageId":"43","endLine":60,"endColumn":42},{"ruleId":"44","severity":1,"message":"45","line":91,"column":52,"nodeType":"46","messageId":"47","endLine":91,"endColumn":54},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]